dnl
dnl header.m4
dnl
dnl   Copyright (c) 2008 by Christian Dietrich <stettberger@dokucode.de>
dnl   Copyright (c) 2008 by Stefan Siegl <stesie@brokenpipe.de>
dnl   Copyright (c) 2008 by Jochen Roessner <jochen@lugrot.de>
dnl  
dnl   This program is free software; you can redistribute it and/or modify
dnl   it under the terms of the GNU General Public License as published by 
dnl   the Free Software Foundation; either version 2 of the License, or
dnl   (at your option) any later version.
dnl  
dnl   This program is distributed in the hope that it will be useful,
dnl   but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl   GNU General Public License for more details.
dnl  
dnl   You should have received a copy of the GNU General Public License
dnl   along with this program; if not, write to the Free Software
dnl   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
dnl  
dnl   For more information on the GPL, please go to:
dnl   http://www.gnu.org/copyleft/gpl.html
dnl
/* This file has been generated by pinning m4 system automatically.
   Please do not modify it, edit the m4 scripts below pinning/ instead. */

#undef BOOTLOADER_SECTION
divert(-1)dnl

define(`port_mask_A', 0)
define(`port_mask_B', 0)
define(`port_mask_C', 0)
define(`port_mask_D', 0)

dnl forloop-implementation from gnu m4 example scripts ...
# forloop(var, from, to, stmt) - simple version
define(`forloop', `pushdef(`$1', `$2')_forloop($@)popdef(`$1')')
define(`_forloop',
       `$4`'ifelse($1, `$3', `', `define(`$1', incr($1))$0($@)')')

changecom(`//')
define(`PM', `port_mask_'$1)dnl
define(`pin', `dnl
define(`pinname', translit(substr(`$2', 1, 1), `a-z', `A-Z'))dnl
define(`pinnum', substr(`$2', 2, 1))dnl
dnl
#define translit(`$1',`a-z', `A-Z')_PORT pinname
#define translit(`$1',`a-z', `A-Z')_PIN pinnum
#define HAVE_'translit(`$1',`a-z', `A-Z')` 1
dnl
define(`port_mask_'pinname, eval(PM(pinname) | (1 << pinnum)))dnl
')

define(`RFM12_USE_INT', `dnl
/* rfm12 module interrupt line */
#define RFM12_INT_PIN INT$1
#define RFM12_INT_SIGNAL SIG_INTERRUPT$1
')

define(`USB_USE_INT', `dnl
/* usb  interrupt line */
#define USB_INT_PIN INT$1
#define USB_INT_SIGNAL SIG_INTERRUPT$1
')

define(`STELLA_PORT_RANGE', `dnl
define(`pinname', translit(substr(`$1', 1, 1), `a-z', `A-Z'))dnl
define(`start', substr(`$1', 2, 1))dnl
define(`stop', substr(`$2', 2, 1))dnl
  /* stella port range configuration: */
  forloop(`itr', start, stop, `dnl
#undef STELLA_PIN_PORT
#undef STELLA_PIN_PIN
#undef HAVE_STELLA_PIN  /* quite a hack, but should do the job *g*    \
                           this is just to keep the preprocessor from \
			   complaining and get the port masks right. */
pin(STELLA_PIN, format(`P%s%d', pinname, itr))
  ' )dnl
#define STELLA_PINS eval(stop-start+1)
#define STELLA_OFFSET start
#define STELLA_PORT format(PORT%s, pinname)
#define STELLA_DDR format(DDR%s, pinname)
')

divert(1)
`#define _PORT_CHAR(character) PORT ## character
#define PORT_CHAR(character) _PORT_CHAR(character)

#define _PIN_CHAR(character) PIN ## character
#define PIN_CHAR(character) _PIN_CHAR(character)
 
#define _DDR_CHAR(character) DDR ## character
#define DDR_CHAR(character) _DDR_CHAR(character)


#define DDR_CONFIG_IN(pin)  DDR_CHAR( pin ## _PORT) &= ~_BV((pin ## _PIN))
#define DDR_CONFIG_OUT(pin)  DDR_CHAR( pin ## _PORT) |= _BV((pin ## _PIN))

#define PIN_BV(pin) (_BV(pin ## _PIN))
#define PIN_NR(pin) (pin ## _PIN)
#define PIN_HIGH(pin) (PIN_CHAR(pin ## _PORT) & _BV(pin ## _PIN))
#define PIN_SET(pin) PORT_CHAR(pin ## _PORT) |= _BV(pin ## _PIN)
#define PIN_CLEAR(pin) PORT_CHAR(pin ## _PORT) &= ~_BV(pin ## _PIN)
#define PIN_TOGGLE(pin) PORT_CHAR(pin ## _PORT) ^= _BV(pin ## _PIN)
#define PIN_PULSE(pin) do { PORT_CHAR(pin ## _PORT) &= ~_BV(pin ## _PIN); \
                              PORT_CHAR(pin ## _PORT) ^= _BV(pin ## _PIN); } while(0)'

